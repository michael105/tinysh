#mlconfig
ifdef undef
# ============================================================================
# either type 'make -f minilib.conf'
# to use this combined config and makefile generated by minimake,
# compile and download when needed (ca.100kB) with minilib.
# (https://github.com/michael105/minilib)
# 
#
# Alternatively, when the script minimake with the embedded minilib 
# is already present, 'minimake --config "thisfile"' 
# compiles without fetching minilib again.
# ============================================================================
#
# 
# Minilib and the accompanying tools are licensed under a 
# BSD-style opensource license with attribution.
# I did my best and I'm using minilib myself,
# but cannot give any guarantees for any functionality
# of an opensource library or the accompanying tools.
#
# (Disclaimer)
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Michael Myer BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The full license is available at the webpage of minilib.
# https://github.com/michael105/minilib
# Michael (misc) Myer, 2021
#
#


BLOAT=1


# Save default. The mini_buf can be used by malloc_buf, and printf. (both optionally)
#MINIBUF 4000
# define headerguards, to prevent parsing the standard headers
HEADERGUARDS


# where to create the dummyheaders (default: ./build)
#BUILDDIR build

# Alternative: create a directory in BUILDDIR with empty standard system header files,
# and use this in the include path of gcc. (More reliable)
# DUMMYHEADER


#-x
# define globals, and options:
# onstack : put the globals on stack. 
#    (past the last used return address, but before the environment.
#    there's more documentation in the readme/reference)
# guarded : put guard pages before, within and after the globals (+~12kB)
# randomize : randomize the layout of the globals at compile time
# GLOBALS guarded
#x

# define var (#define var arg)
# DEFINE var arg

# optimization Flag. Os,O1,O2 might be save. O3 is known to cause sometimes trouble
OPTFLAG -Os

# (with debug info)
#OPTFLAG '-g -Og'

# stripflag ( defaults to -s)
#STRIPFLAG

# which sgements to link, and elf options
SEGMENTS text 

# generate position independent code (-fPIC)
# PIC

# malloc, whether to compile, and options
#MALLOC brk grow CHECK

# compile errno 
# without errno, it is possible to spare globals at all.
# syscalls will return the negative errno value on error
# ERRNO

# Shrink the compiled binary with shrinkelf
SHRINKELF

# generate debug info (-Og -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF
#DEBUG



# list of source files, supplied to gcc
# $1 expands to the current filename 
SOURCES tinysh.c

# the binary to be compiled ( -o $BINARY )
BINARY tinysh

# function switches. Only functions named below will be compiled
COMPILE \
close \
dup2 \
exit \
fgets \
fork \
pipe \
strcmp \
wait \
write \
feof open creat fstream execvp environ nwrite nread ml_getcwd \
getcwd
#eprints eprintsl PRINTF setenv
#MALLOC brk


if [ $BLOAT="1" ]
then
COMPILE getenv strlen putenv

DEFINE BLOAT
SEGMENTS text bss
fi

#GLOBALS onstack

NODEFAULTS

return
endif
# configuration part ends, 
# embedded makefile starts below


VERSION := "20211019"
urlbase := "https://raw.githubusercontent.com/michael105/minilib/download"

fetch = $(shell ((curl $(urlbase)/$(VERSION)/$(1).gz > $(1).gz) || (wget $(urlbase)/$(VERSION)/$(1).gz)) && gunzip $(1).gz)


default: Makefile.minilib minilib.h check compile


compile:
	$(info Compile)
	make -f Makefile.minilib CONF="$(lastword $(MAKEFILE_LIST))"


Makefile.minilib:
	$(info "Download Makefile.minilib (Version $(VERSION))from github")
	$(call fetch,Makefile.minilib)


minilib.h:
	$(info "Download minilib.h (Version $(VERSION))from github")
	$(call fetch,minilib.h)


.ONESHELL:
check:
	@echo "Checking sha256 sums"
	echo -e "$(SHA256SUMS)" | sha256sum -c || exit
	echo ok 


# checksums 
define SHA256SUMS =
2f079c65176d07e16d279ed4b6eda505639779ca928172e76190c76c6268c028  minilib.h
f208100a77a3a852ec576fee571d94b43a461bf9b5daae564a188b4bfbbfcf97  Makefile.minilib
endef


